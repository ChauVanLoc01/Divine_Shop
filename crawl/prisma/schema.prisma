generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cmt {
  cmt_id  Int       @id @default(autoincrement())
  content String    @db.Text
  created DateTime? @default(now()) @db.Timestamp(0)
  updated DateTime? @db.Timestamp(0)
  user_id Int
  item_id Int
  user    user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "cmt_ibfk_1")
  item    item      @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "cmt_ibfk_2")

  @@index([item_id], map: "item_id")
  @@index([user_id], map: "user_id")
}

model item {
  item_id             Int           @id @default(autoincrement())
  item_name           String        @db.VarChar(500)
  image               String        @db.VarChar(300)
  price               Float         @db.Float
  priceBeforeDiscount Float         @db.Float
  quantity            Int
  sold                Int
  description         String?       @db.Text
  category            item_category
  created             DateTime?     @default(now()) @db.Timestamp(0)
  updated             DateTime?     @db.Timestamp(0)
  cmt                 cmt[]
  itemInOrder         itemInOrder[]
}

model itemInOrder {
  order_id Int
  item_id  Int
  order    order @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "iteminorder_ibfk_1")
  item     item  @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "iteminorder_ibfk_2")

  @@id([order_id, item_id])
  @@index([item_id], map: "item_id")
}

model order {
  order_id    Int           @id @default(autoincrement())
  status      order_status? @default(dbgenerated("(_latin1\\'waiting-confirm\\')"))
  total       Float         @db.Float
  discount    Float
  note        String?       @db.VarChar(500)
  created     DateTime?     @default(now()) @db.Timestamp(0)
  updated     DateTime?     @db.Timestamp(0)
  user_id     Int
  itemInOrder itemInOrder[]
  user        user          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_1")

  @@index([user_id], map: "user_id")
}

model session {
  session_id    Int       @id @default(autoincrement())
  user_id       Int
  access_token  String    @db.VarChar(500)
  refresh_token String    @db.VarChar(500)
  created       DateTime? @default(now()) @db.Timestamp(0)
  updated       DateTime? @db.Timestamp(0)
  user          user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "session_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user {
  user_id  Int        @id @default(autoincrement())
  name     String     @db.VarChar(50)
  email    String     @db.VarChar(100)
  password String?    @db.VarChar(100)
  avatar   String?    @db.VarChar(500)
  point    Int?
  role     user_role? @default(dbgenerated("(_latin1\\'user\\')"))
  isActive Boolean?   @default(true)
  created  DateTime?  @default(now()) @db.Timestamp(0)
  updated  DateTime?  @db.Timestamp(0)
  cmt      cmt[]
  order    order[]
  session  session[]
}

enum order_status {
  waiting_confirm @map("waiting-confirm")
  success
  cancel
}

enum user_role {
  admin
  user
}

enum item_category {
  entertainment
  work
  learn
  game_steam        @map("game-steam")
  ea_games          @map("ea-games")
  window_office     @map("window-office")
  google_drive      @map("google-drive")
  steam_wallet      @map("steam-wallet")
  google_play_itune @map("google-play-itune")
}
