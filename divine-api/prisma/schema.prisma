generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cmt {
  cmt_id  Int       @id @default(autoincrement())
  content String    @db.Text
  created DateTime? @default(now()) @db.Timestamp(0)
  updated DateTime? @db.Timestamp(0)
  user_id String    @db.VarChar(50)
  item_id String    @db.VarChar(50)
  user    user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "cmt_ibfk_1")
  item    item      @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "cmt_ibfk_2")

  @@index([item_id], map: "item_id")
  @@index([user_id], map: "user_id")
}

model item {
  item_id             String        @id @db.VarChar(50)
  item_name           String        @db.VarChar(500)
  image               String        @db.VarChar(300)
  price               Float         @db.Float
  priceBeforeDiscount Float?        @db.Float
  quantity            Int
  sold                Int?          @default(0)
  description         String?       @db.Text
  category            item_category
  created             DateTime?     @default(now()) @db.Timestamp(0)
  updated             DateTime?     @db.Timestamp(0)
  cmt                 cmt[]
  itemInOrder         itemInOrder[]
}

model order {
  order_id    String        @id @db.VarChar(50)
  status      order_status? @default(waiting_confirm)
  total       Float         @db.Float
  discount    Float?        @default(0)
  note        String?       @db.VarChar(500)
  created     DateTime?     @default(now()) @db.Timestamp(0)
  updated     DateTime?     @db.Timestamp(0)
  user_id     String        @db.VarChar(50)
  itemInOrder itemInOrder[]
  user        user          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_1")

  @@index([user_id], map: "user_id")
}

model user {
  user_id  String     @id @db.VarChar(50)
  name     String     @db.VarChar(50)
  email    String     @db.VarChar(100)
  password String?    @db.VarChar(100)
  avatar   String?    @db.VarChar(500)
  point    Int?       @default(0)
  role     user_role? @default(user)
  isActive Boolean?   @default(true)
  created  DateTime?  @default(now()) @db.Timestamp(0)
  updated  DateTime?  @db.Timestamp(0)
  cmt      cmt[]
  order    order[]
  session  session[]
}

model itemInOrder {
  order_id String @db.VarChar(50)
  item_id  String @db.VarChar(50)
  quantity Int
  order    order  @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "itemInOrder_ibfk_1")
  item     item   @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "itemInOrder_ibfk_2")

  @@id([order_id, item_id])
  @@index([item_id], map: "item_id")
}

model session {
  session_id    Int       @id @default(autoincrement())
  user_id       String    @db.VarChar(50)
  access_token  String    @db.VarChar(500)
  refresh_token String    @db.VarChar(500)
  created       DateTime? @default(now()) @db.Timestamp(0)
  updated       DateTime? @db.Timestamp(0)
  user          user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "session_ibfk_1")

  @@index([user_id], map: "user_id")
}

enum user_role {
  admin
  user
}

enum order_status {
  waiting_confirm @map("waiting-confirm")
  success
  cancel
}

enum item_category {
  entertainment
  work              @map(" 'work")
  learn             @map(" 'learn")
  game_steam        @map(" 'game-steam")
  ea_games          @map(" 'ea-games")
  window_office     @map(" 'window-office")
  google_drive      @map(" 'google-drive")
  steam_wallet      @map(" 'steam-wallet")
  google_play_itune @map(" 'google-play-itune")
}
